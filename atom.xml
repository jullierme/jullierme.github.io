<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    
    <title><![CDATA[Jullierme Barros]]></title>
    <link>jullierme.github.io//</link>
    <atom:link href="/atom.xml" rel="self" type="application/rss+xml"/>
    <description><![CDATA[Meu blog sobre angularjs, java e coisas que gosto:)]]></description>
    <pubDate>Fri, 14 Aug 2015 22:08:34 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title><![CDATA[Github: Compartilhe seu projeto]]></title>
      <link>jullierme.github.io/Github-Compartilhe-seu-projeto/</link>
      <guid>jullierme.github.io/Github-Compartilhe-seu-projeto/</guid>
      <pubDate>Fri, 14 Aug 2015 03:00:00 GMT</pubDate>
      <description>
      <![CDATA[<p><img src="/Github-Compartilhe-seu-projeto/banner.png" alt=""><br>Neste mini-tutorial, vamos aprender a colocar nosso projeto no github. Também vamos aprender os principais comandos git.</p>]]>
      
      </description>
      <content:encoded><![CDATA[<p><img src="/Github-Compartilhe-seu-projeto/banner.png" alt=""><br>Neste mini-tutorial, vamos aprender a colocar nosso projeto no github. Também vamos aprender os principais comandos git.</p>
<a id="more"></a>
<h3 id="Pra_começar…">Pra começar…</h3><p>Antes de tudo, você precisa criar um repositório no github, na sua conta. É bem simples. Importante: NÃO CRIE O ARQUIVO README. Vamos criar este arquivo pela linha de comando.</p>
<p>Pelo prompt, navegue até a raiz do seu projeto e digite:<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>git init</span><br></pre></td></tr></table></figure></p>
<p>Agora vamos criar o arquivo <b>.gitignore</b> s</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ touch .gitignore</span><br></pre></td></tr></table></figure>
<p>O arquivo <b>.gitignore</b> serve para informarmos as pastas/arquivos do nosso projeto que não serão ‘comitados’.</p>
<p>Por exemplo: se você tem o bower no seu projeto, não vai querer comitar a pasta <b>bower_components</b> nem a pasta <b>node_modules</b>. Para configurar essas pastas, abra o arquivo e informe:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node_modules/&#10;bower_components/</span><br></pre></td></tr></table></figure>
<p>Agora sim vamos criar o arquivo <b>README.md</b>. Digite o comando:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ touch README.md</span><br></pre></td></tr></table></figure>
<p>Agora, informe ao git quem é você. Ele precisa dessas informações para fazer o <b>commit</b></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name <span class="string">"Seu Nome"</span></span><br><span class="line">$ git config --global user.email “seuemail@gmail.com”</span><br></pre></td></tr></table></figure>
<p>Para verificar as pastas observadas pelo git, digite:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git status</span><br></pre></td></tr></table></figure>
<p>Os arquivos de verde estão ‘na fila’ para serem ‘comitados’. Os de vermelho foram alterados mas não foram ‘adicionados na fila’.</p>
<p>Como estamos configurando o git agora, todos os arquivos precisam ser adicionados na fila para serem comitados. Para isso, digite:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git add .</span><br></pre></td></tr></table></figure>
<p>Agora vamos informar ao git da nossa máquina, qual é nosso repositório remoto.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git remote add origin https://github.com/jullierme/angularjs.git</span><br></pre></td></tr></table></figure>
<p>Ok, agora vamos fazer nosso primeiro commit.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git commit -m “comentário <span class="keyword">do</span> seu comit”</span><br></pre></td></tr></table></figure>
<p>Lembrando que, o comando <b>commit</b> envia os arquivos para um no repositório local (INDEX) que está na nossa máquina. Estes ainda não foram para o servidor remoto. Podemos fazer diversos ‘commits’ antes de enviar tudo para o repositório remoto (HEAD)</p>
<p>Para enviar todos os nossos commits para o servidor remoto, digite:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push -u origin master</span><br></pre></td></tr></table></figure>
<p>E se eu quiser atualizar meu repositório local com as informações do repositório remoto?</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git pull</span><br></pre></td></tr></table></figure>
<p>Esse comando simplesmente ‘puxa’ todos os arquivos alterados (commits de outros desenvolvedores) para seu projeto.</p>
<p>Durante o desenvolvimento, você basicamente irá utilizar os comandos:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git add *</span><br></pre></td></tr></table></figure>
<p>O <b>*</b> diz que o git deve adicionar todos os arquivos alterados ‘na fila’ para o próximo commit</p>
<p>Continuando…</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git status</span><br></pre></td></tr></table></figure>
<p>O comando <b>git status</b> sempre vai te mostrar se tem algo para adicionar na fila para ser ‘comitado’ e se não tiver, vai te mostrar quantos commits precisam ser enviados para o repositório remoto (head).</p>
<p>e por ai vai…</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git commit -m “comentário <span class="keyword">do</span> seu comit”</span><br><span class="line">$ git push -u origin master</span><br><span class="line">$ git pull</span><br></pre></td></tr></table></figure>
<p>Um abraço, até a próxima</p>
]]></content:encoded>
      <comments>jullierme.github.io/Github-Compartilhe-seu-projeto/#disqus_comments</comments>
    </item>
    
    <item>
      <title><![CDATA[Livereload com Gruntjs - Aumentando a produtividade]]></title>
      <link>jullierme.github.io/Livereload-com-Gruntjs-Aumentando-a-produtividade/</link>
      <guid>jullierme.github.io/Livereload-com-Gruntjs-Aumentando-a-produtividade/</guid>
      <pubDate>Tue, 04 Aug 2015 03:00:00 GMT</pubDate>
      <description>
      <![CDATA[<p><img src="/Livereload-com-Gruntjs-Aumentando-a-produtividade/banner.jpg" alt=""></p>
<h2 id="Como_isso_funciona?">Como isso funciona?</h2><p>A idéia é que a medida que você vai alterando seu código (js, html, css etc), essas alterações possam ser refletidas imediatamente no browser.</p>
<p>Nesse artigo vamos aprender a configurar o livereload no nosso ambiente utilizando gruntjs e o plugin watch.</p>]]>
      
      </description>
      <content:encoded><![CDATA[<p><img src="/Livereload-com-Gruntjs-Aumentando-a-produtividade/banner.jpg" alt=""></p>
<h2 id="Como_isso_funciona?">Como isso funciona?</h2><p>A idéia é que a medida que você vai alterando seu código (js, html, css etc), essas alterações possam ser refletidas imediatamente no browser.</p>
<p>Nesse artigo vamos aprender a configurar o livereload no nosso ambiente utilizando gruntjs e o plugin watch.</p>
<a id="more"></a>
<h3 id="De_que_preciso?">De que preciso?</h3><p>Você precisa do <a href="http://gruntjs.com/" target="_blank" rel="external">Gruntjs</a> configurado no seu projeto e de apenas um plugin. O <a href="https://github.com/gruntjs/grunt-contrib-watch" target="_blank" rel="external">grunt-contrib-watch</a>.</p>
<h3 id="Instalação">Instalação</h3><p>Pelo prompt de comando, navegue até a raiz do seu projeto, onde se encontra o arquivo <b>Gruntfile.js</b><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install grunt-contrib-watch --save-dev</span><br></pre></td></tr></table></figure></p>
<p>Esse é o plugin vai fazer o livereload funcionar :)</p>
<p>Aqui, eu utilizo outro plugin do grunt, indispensável por sinal. O <a href="https://www.npmjs.com/package/matchdep" target="_blank" rel="external">matchdep</a>. Ele simplesmente importa todos os plugins do grunt de uma vez. Para instalar, basta fazer:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install matchdep --save-dev</span><br></pre></td></tr></table></figure>
<p>Configurando nosso arquivo Gruntfile.js</p>
<figure class="highlight javascript"><figcaption><span>[] Gruntfile.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">grunt</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//Carrega todos os plugins do Grunt declarados no arquivo package.json de uma vez</span></span><br><span class="line">    <span class="built_in">require</span>(<span class="string">'matchdep'</span>).filterDev(<span class="string">'grunt-*'</span>).forEach(grunt.loadNpmTasks);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Configura o Grunt</span></span><br><span class="line">    grunt.initConfig(&#123;</span><br><span class="line">        <span class="comment">// Tarefa watch</span></span><br><span class="line">        watch: &#123;</span><br><span class="line">            options: &#123;</span><br><span class="line">                livereload: <span class="literal">true</span></span><br><span class="line">            &#125;,</span><br><span class="line">            js: &#123;</span><br><span class="line">                files: [<span class="string">'**/*.js'</span>],</span><br><span class="line">            &#125;,</span><br><span class="line">            html: &#123;</span><br><span class="line">                files: [<span class="string">'**/*.html'</span>]</span><br><span class="line">            &#125;,</span><br><span class="line">            css: &#123;</span><br><span class="line">                files: [<span class="string">'**/*.css'</span>],</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//registra uma tarefa</span></span><br><span class="line">    grunt.registerTask( <span class="string">"livereload"</span>, [ <span class="string">"watch"</span> ]);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>Agora, basta você adicionar esse código no index do seu projeto</p>
<figure class="highlight html"><figcaption><span>[] index.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"//localhost:35729/livereload.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="Resumindo">Resumindo</h2><p>hexo ge<br>Da linha 9 a 11, temos a ativação do livereload. Da linha 12 a 20, temos a configuração da escuta, ou seja, toda vez que um arquivo .js, .html ou .css for alterado, será feito o recarregamento da página no browser.</p>
<h2 id="Vamos_aos_testes">Vamos aos testes</h2><p>Inicie o servidor de aplicação e depois digite o comando:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ grunt livereload</span><br></pre></td></tr></table></figure>
<p>Lembrando que <b>livereload</b> é o nome da tarefa que registramos na linha 25</p>
<p>Abra sua aplicação pelo browser, altere algum arquivo e salve. Veja que a página foi recarregada com as novas alterações.</p>
<h2 id="Dica">Dica</h2><p>Eu divido a tela em duas. Do lado esquerdo deixo o webstorm e do lado direito o browser com a aplicação carregada. Dessa forma, vou fazendo a codificação do meu sistema e verificando imediatamente o visual da página. É bem melhor que um “mode design” de alguma ferramenta rad por exemplo.</p>
<h2 id="\o/">\o/</h2><p>É isso ai. Espero que te ajude como me ajudou :) Dúvidas? Deixe seu comentário.</p>
<p>Obrigado</p>
]]></content:encoded>
      <comments>jullierme.github.io/Livereload-com-Gruntjs-Aumentando-a-produtividade/#disqus_comments</comments>
    </item>
    
    <item>
      <title><![CDATA[Iniciando com bower]]></title>
      <link>jullierme.github.io/Iniciando-com-bower/</link>
      <guid>jullierme.github.io/Iniciando-com-bower/</guid>
      <pubDate>Mon, 27 Jul 2015 03:00:00 GMT</pubDate>
      <description>
      <![CDATA[<p><img src="/Iniciando-com-bower/banner.jpg" alt=""></p>
<h2 id="Por_que_utilizar_o_bower?">Por que utilizar o bower?</h2><p>Sabe como funciona o MAVEN para gerenciamento de dependências Java? Pois bem, o bower é uma ferramenta de gerenciamento de dependências de projetos client-side, similar ao maven. Ele pode ser adicionado em qualquer projeto, independente do back-end ser Java, Node, etc.</p>
<p>Imagina que você tem um projeto html/javascript e precisa ficar fazendo download manual de todos os scripts/dependências que seu sistema utiliza. E o ciclo se repete a cada nova versão de uma dependência. Isso é trabalhoso e improdutivo.</p>
<p>Com o bower, você pode adicionar uma nova dependência configurando um único arquivo (bower.json) ou simplesmente digitar um comando no prompt do windows.</p>]]>
      
      </description>
      <content:encoded><![CDATA[<p><img src="/Iniciando-com-bower/banner.jpg" alt=""></p>
<h2 id="Por_que_utilizar_o_bower?">Por que utilizar o bower?</h2><p>Sabe como funciona o MAVEN para gerenciamento de dependências Java? Pois bem, o bower é uma ferramenta de gerenciamento de dependências de projetos client-side, similar ao maven. Ele pode ser adicionado em qualquer projeto, independente do back-end ser Java, Node, etc.</p>
<p>Imagina que você tem um projeto html/javascript e precisa ficar fazendo download manual de todos os scripts/dependências que seu sistema utiliza. E o ciclo se repete a cada nova versão de uma dependência. Isso é trabalhoso e improdutivo.</p>
<p>Com o bower, você pode adicionar uma nova dependência configurando um único arquivo (bower.json) ou simplesmente digitar um comando no prompt do windows.</p>
<a id="more"></a>
<h2 id="Vamos_lá…">Vamos lá…</h2><p>Primeiro, certifique-se que em sua máquina esta instalado o <a href="https://nodejs.org/download/" target="_blank" rel="external">Nodejs</a> e o <a href="https://git-scm.com/downloads" target="_blank" rel="external">Git</a>.</p>
<p>Falaremos sobre o nodejs outro post, por hora, apenas precisamos instalá-lo, pois o bower roda “em cima” do nodejs.</p>
<h3 id="GO_GO_GO">GO GO GO</h3><p>Primeiramente, precisamos instalar o bower no nodejs, de forma que possa ser utilziado por qualquer projeto. Para isso abra o prompt de comando (modo administrador) e digite o seguinte comando:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g bower</span><br></pre></td></tr></table></figure>
<h3 id="Configurando_o_projeto">Configurando o projeto</h3><p>Pelo prompt, navegue até o diretório raiz do seu projeto. Para habilitar o bower, digite:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ bower init</span><br></pre></td></tr></table></figure>
<p>Algumas opções serão exibidas pra você configurar o arquivo principal do bower (bower.json). Porém, você pode fazer isso diretamente no arquivo mais tarde. Por hora, vá precionando enter até finalizar.</p>
<p>Ao final, seu arquivo <i>bower.json</i> será gerado na raiz do projeto.</p>
<h3 id="Instalando_sua_primeira_dependência">Instalando sua primeira dependência</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ bower install bootstrap --save</span><br></pre></td></tr></table></figure>
<p>O comando acima baixou (clone) todo o repositório do <a href="getbootstrap.com">bootstrap</a> que está no <a href="https://github.com/twbs/bootstrap" target="_blank" rel="external">github</a>. Uma nova pasta foi criada para salvar todas as dependências baixadas chamada <i>bower_components</i></p>
<p>A opção <i>—save</i> fez com que seu arquivo <i>bower.json</i> fosse configurado com essa dependência. </p>
<p>Agora é só apontar o script desejado na sua index.html</p>
<figure class="highlight html"><figcaption><span>[] index.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">link</span> <span class="attribute">rel</span>=<span class="value">"stylesheet"</span> <span class="attribute">href</span>=<span class="value">"bower_components/bootstrap/dist/css/bootstrap.min.css"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">link</span> <span class="attribute">rel</span>=<span class="value">"stylesheet"</span> <span class="attribute">href</span>=<span class="value">"bower_components/bootstrap/dist/css/bootstrap-theme.min.css"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<p>Se você utiliza o git, svn ou cvs, não precisa fazer o commit da pasta <i>bower_components</i>. Sempre que quiser execute o comando abaixo para baixar todas as dependências já configuradas no seu arquivo bower.json</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ bower update</span><br></pre></td></tr></table></figure>
<p>É isso ai! Não deixe de perguntar se tiver alguma dúvida. </p>
<p>Obrigado, até o próximo post.</p>
]]></content:encoded>
      <comments>jullierme.github.io/Iniciando-com-bower/#disqus_comments</comments>
    </item>
    
  </channel>
</rss>